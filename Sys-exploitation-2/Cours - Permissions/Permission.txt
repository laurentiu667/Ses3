==================CHMOD==================
Chmod = changer les permissions
Chiffre : chmod  777  /tmp/f1.txt
Lettre : chmod a+rwx toto.txt

Prenons l'exemple de la chaîne de permissions -rw-rw-r--.

Chaque ensemble de neuf caractères représente les permissions pour le propriétaire, le groupe et les autres utilisateurs. Les caractères sont représentés comme suit :

Les trois premiers caractères sont pour le propriétaire.
Les trois caractères suivants sont pour le groupe.
Les trois derniers caractères sont pour les autres utilisateurs.
Chaque groupe de trois caractères peut être interprété comme suit :

Premier caractère (lecture - r):

Si le caractère est présent, cela signifie que la personne ou le groupe a le droit de lire le fichier.
Deuxième caractère (écriture - w):

Si le caractère est présent, cela signifie que la personne ou le groupe a le droit d'écrire (modifier) dans le fichier.
Troisième caractère (exécution - x):

Si le caractère est présent pour un fichier, cela signifie que la personne ou le groupe a le droit d'exécuter (lancer) le fichier. Pour un répertoire, cela signifie le droit de traverser le répertoire (d'accéder à son contenu).
Reprenons votre exemple -rw-rw-r-- :

Propriétaire (les trois premiers caractères - "rw-"):

Le propriétaire a le droit de lire (r) et d'écrire (w) dans le fichier, mais n'a pas le droit d'exécuter (-).
Groupe (les trois caractères suivants - "rw-"):

Le groupe a le droit de lire (r) et d'écrire (w) dans le fichier, mais n'a pas le droit d'exécuter (-).
Autres utilisateurs (les trois derniers caractères - "r--"):

Les autres utilisateurs ont le droit de lire (r) le fichier mais n'ont pas le droit d'écrire (-) ni d'exécuter (-).

==================CHOWN - CHGRP==================

Chown permet de changer les propriétaires d'un fichier. donc si je fais :

CHGRP permet seulement de faire changer le groupe propriétaire du fichier.
chown Alex667 toto.txt : maintenant Alex667 sera propriétaire

si je fais chown Alex667:EnnemiAlex toto.txt, Alex667 sera propriétaire, ainsi que tous les membres du groupe EnnemiAlex
ChatGPT
Oui, c'est exact. Si vous exécutez la commande chown Alex667:EnnemiAlex toto.txt, cela signifie que l'utilisateur "Alex667" deviendra le propriétaire du fichier "toto.txt", et le groupe propriétaire du fichier sera défini sur "EnnemiAlex". En conséquence, tous les membres du groupe "EnnemiAlex" auront des droits spécifiques sur ce fichier, en fonction des permissions définies pour le groupe.

Après avoir exécuté cette commande, vous pouvez utiliser chmod pour ajuster les permissions spécifiques pour le propriétaire et le groupe, si nécessaire. Par exemple, pour permettre au propriétaire et au groupe d'écrire dans le fichier, vous pouvez utiliser la commande chmod comme suit :

bash
Copy code
chmod ug+w toto.txt
Cela ajoutera le droit d'écriture (w) pour le propriétaire (u) et le groupe (g) du fichier "toto.txt". Les permissions exactes que vous souhaitez définir dépendent de vos besoins spécifiques en matière de sécurité et d'accès aux fichiers.

==================STICKY==================
empêche les utilisateurs d'effacer ou de renommer des fichiers s'ils ne sont pas les propriétaires de ces fichiers mais permet aux utilisateurs de modifier le contenu des fichiers
chmod +t nom_du_repertoire
Vous pouvez voir le sticky bit activé en utilisant la commande ls -l où un "t" apparaît à la fin des permissions du répertoire.

—	0	000	No permission
–x	1	001	only permission to execute 
-w-	2	010	only permission to write
-wx	3	011	permission to write and execute
r–	4	100	only permission to read
r-x	5	101	permission to read and execute
rw-	6	110	permission to read and write
rwx	7	111	permission to do all three, i.e. read, write and execute

==================UMASK==================
La commande umask définit les permissions par défaut qui seront retirées lors de la création de nouveaux fichiers ou répertoires. C'est une sorte de masque qui spécifie quelles permissions ne doivent pas être accordées par défaut lorsqu'un fichier ou un répertoire est créé. La umask est donc utilisée pour restreindre les droits par défaut des nouveaux fichiers et répertoires.

Voici comment la umask fonctionne :

La umask est configurée en utilisant une valeur octale.
Chaque chiffre dans la valeur octale correspond à une catégorie d'utilisateurs (propriétaire, groupe, autres).
Les chiffres représentent les bits de permission à retirer. Si le bit est présent dans la umask, il sera retiré lors de la création d'un fichier ou d'un répertoire.
Exemple :

umask 022 signifie que le bit de "write" (2) sera retiré pour le groupe et les autres, laissant les permissions par défaut de 644 pour les nouveaux fichiers (rw-r--r--).

